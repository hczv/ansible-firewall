{% macro loggingswitch(nftableslogging) %}
{% if nftableslogging %}
      log
{%- endif %}
{% endmacro %}

{% macro defaultchains(nftables_global) -%}
# Create input chain
add chain ip filter input { type filter hook input priority filter; policy {{ nftables_global.default_policy.input | default("accept") }}; }

# Create forward chain
add chain ip filter forward { type filter hook forward priority filter; policy {{ nftables_global.default_policy.forward | default("drop") }}; }

# Create output chain
add chain ip filter output { type filter hook output priority filter; policy {{ nftables_global.default_policy.output | default("accept") }}; }

# Create prerouting chain
add chain ip filter prerouting { type nat hook prerouting priority dstnat; policy accept; }

# Create postrouting chain
add chain ip filter postrouting { type nat hook postrouting priority srcnat; policy accept; }

# Accept all traffic on the loopback interface
add rule ip filter input iifname "lo" accept
# Accept established and related connections, drop invalid ones
add rule ip filter input ct state vmap { established: accept, related: accept, invalid: drop }
add rule ip filter forward ct state vmap { established: accept, related: accept, invalid: drop }

{% endmacro %}

{% macro create_zone(zone) -%}
# Zone: {{ zone.name }}
# Define interface set
add set ip filter {{ zone.name }}_ifaces { type ifname; flags interval; }
add element ip filter {{ zone.name }}_ifaces { {{ zone.interfaces | join(', ') }} }

{%- if zone.subnets is defined and zone.subnets %}
# Define Subnet set
add set ip filter {{ zone.name }}_subnets { type ipv4_addr; flags interval; }
add element ip filter {{ zone.name }}_subnets { {{ zone.subnets | join(', ') }} }
{%- endif %}

{%- if zone.allow_intrazone_traffic is defined and zone.allow_intrazone_traffic %}
# Allow intra-zone traffic for {{ zone.name }}
add rule ip filter forward iifname @{{ zone.name }}_ifaces oifname @{{ zone.name }}_ifaces accept comment "intrazone traffic {{ zone.name }}"
{%- endif %}
{% endmacro %}

{% macro create_set(set, dnsmasq=false) %}
{% if dnsmasq %}
add set ip filter {{ set.name }} { type ipv4_addr; timeout 4h; }
{% else %}
add set ip filter {{ set.name }} { type ipv4_addr; flags interval; }
{% endif %}

{% if set.subnets is defined and set.subnets %}
add element ip filter {{ set.name }} { {{ set.subnets | join(', ') }} }
# Extra define for {{ set.name }} due to nat not being able to use set directly
define {{ set.name }} = {{ '{ ' ~ (set.subnets | unique | join(', ')) ~ ' }' if set.subnets | unique | length > 1 else set.subnets | unique | first }}
{% endif %}
{% endmacro %}

{% macro create_input_rule(input_rule, nftables_global) -%}
# {{ input_rule.name }}
{% set variants = [] %}
{% if input_rule.sources is not defined or
      (input_rule.sources.subnets is not defined and input_rule.sources.sets is not defined) or
      (input_rule.sources.subnets | default([]) == [] and input_rule.sources.sets | default([]) == []) %}
    {% set _ = variants.append({
        'src_zone': input_rule.zone | default(none),
        'dst_zone': none,
        'src_set': none,
        'dst_set': none,
    }) %}
{% endif %}
{% if input_rule.sources.subnets is defined and input_rule.sources.subnets %}
    {% set _ = variants.append({
        'src_zone': input_rule.zone,
        'dst_zone': none,
        'src_set': input_rule.zone ~ '_subnets',
        'dst_set': none,
    }) %}
{% endif %}
{% if input_rule.sources.sets is defined and input_rule.sources.sets %}
    {% for src_set in input_rule.sources.sets %}
        {% set _ = variants.append({
            'src_zone': input_rule.zone,
            'dst_zone': none,
            'src_set': src_set,
            'dst_set': none,
        }) %}
    {% endfor %}
{% endif %}
{{ create_generic_rules(input_rule, 'input', variants) }}
{%- endmacro %}


{% macro create_forward_rule(forward_rule, nftables_global) %}
# {{ forward_rule.name }}
{% set variants = [] %}
{% for source in forward_rule.sources %}
  {% for destination in forward_rule.destinations %}
    {# src_set + dst_set #}
    {% for src_set in source.sets | default([]) %}
      {% for dst_set in destination.sets | default([]) %}
        {% set _ = variants.append({
          'src_zone': source.zone | default(none),
          'dst_zone': destination.zone | default(none),
          'src_set': src_set,
          'src_subnet': none,
          'dst_set': dst_set,
          'dst_subnet': none
        }) %}
      {% endfor %}
      {% if destination.subnets is defined and destination.subnets %}
        {% set _ = variants.append({
          'src_zone': source.zone | default(none),
          'dst_zone': destination.zone | default(none),
          'src_set': src_set,
          'dst_set': destination.zone ~ '_subnets',
        }) %}
      {% endif %}
    {% endfor %}
    {# src_subnet + dst_set #}
    {% if source.subnets is defined and source.subnets %}
      {% for dst_set in destination.sets | default([]) %}
        {% set _ = variants.append({
          'src_zone': source.zone | default(none),
          'dst_zone': destination.zone | default(none),
          'src_set': source.zone ~ '_subnets',
          'dst_set': dst_set,
        }) %}
      {% endfor %}
      {% if destination.subnets is defined and destination.subnets %}
        {% set _ = variants.append({
          'src_zone': source.zone | default(none),
          'dst_zone': destination.zone | default(none),
          'src_set': source.zone ~ '_subnets',
          'dst_set': destination.zone ~ '_subnets',
        }) %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{{ create_generic_rules(forward_rule, 'forward', variants) }}
{% endmacro %}


{% macro create_generic_rules(rule, chain, variants) -%}
    {% for v in variants %}
{{ create_generic_rule(rule, chain,
            v.src_zone, v.dst_zone,
            v.src_set, v.dst_set,) }}
    {% endfor %}
{%- endmacro %}

{% macro create_generic_rule(rule, chain, src_zone, dst_zone, src_set, dst_set) -%}
{%- set destination_ports = rule.destination_ports if rule.destination_ports is defined else {} %}
{%- if destination_ports %}
    {%- for proto, dst_ports in destination_ports.items() %}
add rule ip filter {{ chain }} {# #}
{%- if src_zone %} iifname @{{ src_zone }}_ifaces {% endif -%}
{%- if dst_zone %} oifname @{{ dst_zone }}_ifaces {% endif -%}
{%- if src_set %} ip saddr @{{ src_set }} {% endif -%}
{%- if dst_set %} ip daddr @{{ dst_set }} {% endif -%}
{{ proto }}
{%- if proto == 'icmp' and dst_ports | length >= 1 %} type {% else %} dport {% endif -%}
{%- if dst_ports | length > 1 %} { {{ dst_ports | join(', ') }} }{% else %} {{ dst_ports[0] }}{% endif %}
{# #} counter {{ rule.action | default('accept') }} comment "{{ rule.name | default('unspecified', true) }}"
    {% endfor %}
{% else %}
add rule ip filter {{ chain }} {# #}
{%- if src_zone %} iifname @{{ src_zone }}_ifaces {% endif -%}
{%- if dst_zone %} oifname @{{ dst_zone }}_ifaces {% endif -%}
{%- if src_set %} ip saddr @{{ src_set }} {% endif -%}
{%- if dst_set %} ip daddr @{{ dst_set }} {% endif -%}
{# #} counter {{ rule.action | default('accept') }} comment "{{ rule.name | default('unspecified', true) }}"
{% endif %}
{% endmacro %}

{% macro create_nat_rule(nat_rule, nftables_global) %}
# {{ nat_rule.name }}
{% if nat_rule.type == 'snat' %}
{{ create_nat_snat_rule(nat_rule, nftables_global) }}
{% endif %}
{% if nat_rule.type == 'dnat' %}
{{ create_nat_dnat_rule(nat_rule, nftables_global) }}
{% endif %}
{% endmacro %}


{% macro create_nat_snat_rule(nat_rule, nftables_global) %}
add rule ip filter postrouting
{%- if nat_rule.source_zone is defined and nat_rule.source_zone %} iifname @{{ nat_rule.source_zone }}_ifaces {% endif -%}
{%- if nat_rule.destination_zone is defined and nat_rule.destination_zone %} oifname @{{ nat_rule.destination_zone }}_ifaces {% endif -%} counter
{%- if nat_rule.masquerade is defined and nat_rule.masquerade %} masquerade {% endif -%}
{% endmacro %}

{% macro create_nat_dnat_rule(nat_rule, nftables_global) %}
{% for proto, dst_ports in nat_rule.ports.items() %}
  {% for dport in dst_ports %}
add rule ip filter prerouting
{%- if nat_rule.source_zone is defined and nat_rule.source_zone %} iifname @{{ nat_rule.source_zone }}_ifaces {% endif -%}
{%- if nat_rule.dnat_zone is defined and nat_rule.dnat_zone %} oifname @{{ nat_rule.dnat_zone }}_ifaces {% endif -%}
{%- if nat_rule.source_set is defined and nat_rule.source_set %} ip saddr @{{ nat_rule.source_set }} {% endif -%}
{%- if nat_rule.destination_set is defined and nat_rule.destination_set %} ip daddr @{{ nat_rule.destination_set }} {% endif -%}
{{ proto }} dport { {{ dport.destination_port }} } counter dnat to ${{ nat_rule.dnat_set }}{% if dport.destination_port != dport.to_port %}:{{ dport.to_port }}{% endif %}

  {% endfor %}
{% endfor %}
{% endmacro %}

