{#
  Macro: get_merged_list(base)

  Purpose:
    Merges multiple list variables with the same base name and numeric suffixes
    into a single combined list.

  Behavior:
    - Iterates over variable names like: base, base_0, base_1, ..., base_9
    - If a variable is defined, iterable (but not a string), and non-empty,
      its items are appended to the final merged list.
    - The merge order is base → base_0 → base_1 → ... → base_9

  Example:
    If called as get_merged_list("mylist"), it will merge:
      - mylist
      - mylist_0 to mylist_9
    Resulting in one flat JSON list.
#}
{% macro get_merged_list(base) %}
{%- set ns = namespace(candidates=[base], merged=[]) %}
{%- for i in range(10) %}
  {%- set _ = ns.candidates.append(base ~ '_' ~ i|string) %}
{%- endfor %}
{%- for var_name in ns.candidates %}
  {%- set val = lookup('vars', var_name, default=[]) %}
  {%- if val is iterable and val is not string and val|length > 0 %}
    {%- set ns.merged = ns.merged + val %}
  {%- endif %}
{%- endfor %}
{{ ns.merged | to_json }}
{% endmacro %}

{#
  Macro: get_merged_map(base)

  Purpose:
    Deeply merges multiple dictionary (map) variables with the same base name
    and numeric suffixes into a single combined map, with later variables
    overriding earlier ones recursively.

  Behavior:
    - Iterates over variable names: base, base_0, base_1, ..., base_9
    - If a variable is defined and is a non-empty dictionary,
      it is merged into the result using Ansible's recursive `combine` filter.
    - Merge order is base → base_0 → base_1 → ... → base_9
      (later maps override earlier keys at all levels)

  Example:
    If called as get_merged_map("nftables_global"), it will merge:
      - nftables_global
      - nftables_global_0 to nftables_global_9
    Produces a deep-merged JSON object.

  Notes:
    This is useful for merging firewall, configuration, or policy maps
    that may be split across multiple variable files or roles.
#}
{% macro get_merged_map(base) %}
{%- set ns = namespace(candidates=[base], merged={}) %}
{%- for i in range(10) %}
  {%- set _ = ns.candidates.append(base ~ '_' ~ i|string) %}
{%- endfor %}
{%- for var_name in ns.candidates %}
  {%- set val = lookup('vars', var_name, default={}) %}
  {%- if val is mapping and val|length > 0 %}
    {%- set ns.merged = ns.merged | combine(val, recursive=True) %}
  {%- endif %}
{%- endfor %}
{{ ns.merged | to_json }}
{% endmacro %}



{% macro loggingswitch(nftableslogging) %}
{% if nftableslogging %}
      log
{%- endif %}
{% endmacro %}

{% macro defaultchains(nftables_global) -%}
# Create input chain
add chain ip filter input { type filter hook input priority filter; policy {{ nftables_global.default_policy.input | default("accept") }}; }

# Create forward chain
add chain ip filter forward { type filter hook forward priority filter; policy {{ nftables_global.default_policy.forward | default("drop") }}; }

# Create output chain
add chain ip filter output { type filter hook output priority filter; policy {{ nftables_global.default_policy.output | default("accept") }}; }

# Create prerouting chain
add chain ip filter prerouting { type nat hook prerouting priority dstnat; policy accept; }

# Create postrouting chain
add chain ip filter postrouting { type nat hook postrouting priority srcnat; policy accept; }

# Accept all traffic on the loopback interface
add rule ip filter input iifname "lo" accept
# Accept established and related connections, drop invalid ones
add rule ip filter input ct state vmap { established: accept, related: accept, invalid: drop }
add rule ip filter forward ct state vmap { established: accept, related: accept, invalid: drop }

{% endmacro %}

{% macro create_zone(zone) -%}
# Zone: {{ zone.name }}
# Define interface set
add set ip filter {{ zone.name }}_ifaces { type ifname; flags interval; }
add element ip filter {{ zone.name }}_ifaces { {{ zone.interfaces | join(', ') }} }

{%- if zone.subnets is defined and zone.subnets %}
# Define Subnet set
add set ip filter {{ zone.name }}_subnets { type ipv4_addr; flags interval; }
add element ip filter {{ zone.name }}_subnets { {{ zone.subnets | join(', ') }} }
{%- endif %}

{%- if zone.allow_intrazone_traffic is defined and zone.allow_intrazone_traffic %}
# Allow intra-zone traffic for {{ zone.name }}
add rule ip filter forward iifname @{{ zone.name }}_ifaces oifname @{{ zone.name }}_ifaces accept
{%- endif %}
{% endmacro %}

{% macro create_set(set, dnsmasq=false) %}
{% if dnsmasq %}
add set ip filter {{ set.name }} { type ipv4_addr; timeout 4h; }
{% else %}
define {{ set.name }} = {{ '{ ' ~ (set.subnets | unique | join(', ')) ~ ' }' if set.subnets | unique | length > 1 else set.subnets | unique | first }}


add set ip filter {{ set.name }} { type ipv4_addr; flags interval; }
{% endif %}

{% if set.subnets is defined and set.subnets %}
add element ip filter {{ set.name }} { {{ set.subnets | join(', ') }} }
{% endif %}
{% endmacro %}

{% macro create_input_rule(input_rule, nftables_global) -%}
# {{ input_rule.name }}
{% if input_rule.sources.subnets is defined and input_rule.sources.subnets %}
{{ create_generic_rule(input_rule, 'input', input_rule.zone, none, none, true, none, none) }}
{%- endif %}
{% if input_rule.sources.sets is defined and input_rule.sources.sets %}
    {% for src_set in input_rule.sources.sets %}
{{ create_generic_rule(input_rule, 'input', input_rule.zone, none, src_set, none, none, none) }}
    {% endfor %}
{% endif %}
{% endmacro %}

{% macro create_forward_rule(forward_rule, nftables_global) %}
# {{ forward_rule.name }}
{% for source in forward_rule.sources -%}
  {% for src_set in source.sets | default([]) -%}
    {% for destination in forward_rule.destinations -%}
      {% for dst_set in destination.sets | default([]) -%}
{{ create_generic_rule(forward_rule, 'forward', source.zone, destination.zone, src_set, none, dst_set, none) }}
      {%- endfor %}
      {%- if destination.subnets is defined and destination.subnets %}
{{ create_generic_rule(forward_rule, 'forward', source.zone, destination.zone, src_set, none, none, true) }}
      {%- endif %}
    {%- endfor %}
  {%- endfor %}
  {%- if source.subnets is defined and source.subnets %}
    {% for destination in forward_rule.destinations -%}
      {% for dst_set in destination.sets | default([]) -%}
{{ create_generic_rule(forward_rule, 'forward', source.zone, destination.zone, none, true, dst_set, none) }}
      {%- endfor %}
      {%- if destination.subnets is defined and destination.subnets -%}
{{ create_generic_rule(forward_rule, 'forward', source.zone, destination.zone, none, true, none, true) }}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
{% endmacro %}

{% macro create_generic_rule(rule, chain, src_zone, dst_zone, src_set, src_subnet, dst_set, dst_subnet) -%}
{%- set destination_ports = rule.destination_ports if rule.destination_ports is defined else {} %}
{%- if destination_ports %}
    {%- for proto, dst_ports in destination_ports.items() %}
add rule ip filter {{ chain }}
{%- if src_zone %} iifname @{{ src_zone }}_ifaces {% endif -%}
{%- if dst_zone %} oifname @{{ dst_zone }}_ifaces {% endif -%}
{%- if src_set %} ip saddr @{{ src_set }} {% endif -%}
{%- if src_subnet %} ip saddr @{{ src_zone }}_subnets {% endif -%}
{%- if dst_set %} ip daddr @{{ dst_set }} {% endif -%}
{%- if dst_subnet %} ip daddr @{{ dst_zone }}_subnets {% endif -%}
{{ proto }} dport
{%- if dst_ports | length > 1 %} { {{ dst_ports | join(', ') }} }{% else %} {{ dst_ports[0] }}{% endif %}
 counter {{ rule.action | default('accept') }} comment "{{ rule.name | default('unspecified', true) }}"
    {% endfor %}
{% else %}
add rule ip filter {{ chain }}
{%- if src_zone %} iifname @{{ src_zone }}_ifaces {% endif -%}
{%- if dst_zone %} oifname @{{ dst_zone }}_ifaces {% endif -%}
{%- if src_set %} ip saddr @{{ src_set }} {% endif -%}
{%- if src_subnet %} ip saddr @{{ src_zone }}_subnets {% endif -%}
{%- if dst_set %} ip daddr @{{ dst_set }} {% endif -%}
{%- if dst_subnet %} ip daddr @{{ dst_zone }}_subnets {% endif -%}
 counter {{ rule.action | default('accept') }} comment "{{ rule.name | default('unspecified', true) }}"
{% endif %}
{% endmacro %}

{% macro create_nat_rule(nat_rule, nftables_global) %}
# {{ nat_rule.name }}
{% if nat_rule.type == 'snat' %}
{{ create_nat_snat_rule(nat_rule, nftables_global) }}
{% endif %}
{% if nat_rule.type == 'dnat' %}
{{ create_nat_dnat_rule(nat_rule, nftables_global) }}
{% endif %}
{% endmacro %}


{% macro create_nat_snat_rule(nat_rule, nftables_global) %}
add rule ip filter postrouting
{%- if nat_rule.source_zone is defined and nat_rule.source_zone %} iifname @{{ nat_rule.source_zone }}_ifaces {% endif -%}
{%- if nat_rule.destination_zone is defined and nat_rule.destination_zone %} oifname @{{ nat_rule.destination_zone }}_ifaces {% endif -%} counter
{%- if nat_rule.masquerade is defined and nat_rule.masquerade %} masquerade {% endif -%}
{% endmacro %}

{% macro create_nat_dnat_rule(nat_rule, nftables_global) %}
{% for proto, dst_ports in nat_rule.ports.items() %}
  {% for dport in dst_ports %}
add rule ip filter prerouting
{%- if nat_rule.source_zone is defined and nat_rule.source_zone %} iifname @{{ nat_rule.source_zone }}_ifaces {% endif -%}
{%- if nat_rule.dnat_zone is defined and nat_rule.dnat_zone %} oifname @{{ nat_rule.dnat_zone }}_ifaces {% endif -%}
{%- if nat_rule.source_set is defined and nat_rule.source_set %} ip saddr @{{ nat_rule.source_set }} {% endif -%}
{%- if nat_rule.destination_set is defined and nat_rule.destination_set %} ip daddr @{{ nat_rule.destination_set }} {% endif -%}
{{ proto }} dport { {{ dport.destination_port }} } counter dnat to ${{ nat_rule.dnat_set }}{% if dport.destination_port != dport.to_port %}:{{ dport.to_port }}{% endif %}

  {% endfor %}
{% endfor %}
{% endmacro %}

