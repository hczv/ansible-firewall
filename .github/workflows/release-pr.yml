name: Release-pr

permissions:
  pull-requests: write
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (e.g., 1.0.0)'
        required: true
        type: string


jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use MAJOR.MINOR.PATCH (e.g., 1.2.3)."
            exit 1
          fi
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: CHANGELOG.md

      - name: Set up git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create a new branch and commit changelog
        run: |
          BRANCH_NAME=chore/update-changelog-$(date +%s)
          git checkout -b "$BRANCH_NAME"
          git add CHANGELOG.md
          git commit -m "chore: update changelog [skip ci]"
          git push origin "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request with gh cli
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "chore: update changelog" \
            --body "Automated changelog update via git-cliff." \
            --head "$BRANCH_NAME" \
            --base main
#  # Create a PR with the new versions and changelog, preparing the next release.
#  release-plz-pr:
#    name: Release-plz PR
#    runs-on: ubuntu-latest
#    permissions:
#      # Used to create and update pull requests.
#      pull-requests: write
#      # Used to push to the pull request branch.
#      contents: write
#
#    # The concurrency block is explained below (after the code block).
#    concurrency:
#      group: release-plz-${{ github.ref }}
#      cancel-in-progress: false
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          # `fetch-depth: 0` is needed to clone all the git history, which is necessary to
#          # determine the next version and build the changelog.
#          fetch-depth: 0
#      - name: Install Rust toolchain
#        uses: dtolnay/rust-toolchain@stable
#      - name: Run release-plz
#        uses: release-plz/action@v0.5
#        with:
#          # Run `release-plz release-pr` command.
#          command: release-pr
#          version: "${{ github.event.inputs.version }}"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
